EXP 1:

import java.lang.*;
import java.io.*;
import java.util.*;

public class Main
{
public static void main(String[] arg) throws IOException
{
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
System.out.print("Enter the String : ");
String s = br.readLine();
int state = 0;
System.out.print("Q0-->");
for(char ch:s.toCharArray())
{
if(state==0)
{
if(ch=='b'||ch=='c')
System.out.print("Q0-->");
else
{
state = 1;
System.out.print("Q1-->");
}
}
else if(state==1)
{
if(ch=='a')
System.out.print("Q1-->");
else if(ch=='b')
{
state = 2;
System.out.print("Q2-->");
}
else
{
state = 0;
System.out.print("Q0-->");
}
}
else if(state==2)
{
if(ch=='a')
{
state = 1;
System.out.print("Q1-->");
}
else if(ch=='b')
{
state = 0;
System.out.print("Q0-->");
}
else
{
state = 3;
System.out.print("Q3-->");
}
}
else
{
if(ch=='b'||ch=='c')
{
state = 0;
System.out.print("Q0-->");
}
else
{
state = 1;
System.out.print("Q1-->");
}
}
}
System.out.println("X");
if(state==3)
System.out.println("Accepted");
else
System.out.println("Rejected");
}
}

EXP 2:

import java.util.Scanner;
public class LA {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter your code (type 'exit' to finish):");
        String line;
        while (!(line = scanner.nextLine()).equals("exit")) {
          analyzeLine(line);
        }
    }
    public static void analyzeLine(String line) {
        String[] tokens = line.split("\\s+");
        for (String token : tokens) {
            if (isKeyword(token)) {
                System.out.println(token + " : Keyword");
            } else if (isIdentifier(token)) {
                System.out.println(token + " : Identifier");
            } else if (isOperator(token)) {
                System.out.println(token + " : Operator");
            } else if (isSeparator(token)) {
                System.out.println(token + " : Separator");
            } else {
                System.out.println(token + " : Other");
            }
        }
    }
    public static boolean isKeyword(String token) {
        String[] keywords = {"int", "float", "if", "else", "for", "while", "do", "break", "continue"};
        for (String keyword : keywords) {
            if (token.equals(keyword)) {
                return true;
            }
        }
        return false;
    }
    public static boolean isIdentifier(String token) {
        return token.matches("[a-zA-Z]+[a-zA-Z0-9]*");
    }
    public static boolean isOperator(String token) {
        String[] operators = {"+", "-", "", "^","%","/", "=", "==","++","--","!=","+=" ,"-=","=","/=","%=",">", "<", ">=", "<="};
        for (String operator : operators) {
            if (token.equals(operator)) {
                return true;
            }
        }
        return false;
    }   
    public static boolean isSeparator(String token) {
        String[] separators = {";", ",", "(", ")", "{", "}"};
        for (String separator : separators) {
            if (token.equals(separator)) {
                return true;
            }
        }
        return false;
    }
}


EXP 3 :


import java.util.Scanner;

public class LeftRecursion {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        char nt;
        char b, a;
        int num;
        int index = 3;
        System.out.print("Enter Number of productions:");
        num = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        String[] p = new String[num];
        System.out.println("Enter the grammar as E->E-A:");
        for (int i = 0; i < num; i++) {
            p[i] = scanner.nextLine();
        }
        for (int i = 0; i < num; i++) {
            System.out.println("\nGRAMMAR:" + p[i]);
            nt = p[i].charAt(0);
            if (nt == p[i].charAt(index)) {
                a = p[i].charAt(index);
                System.out.println("is left recursive:");
                while (index < p[i].length() && p[i].charAt(index) != '|' && p[i].charAt(index) != 0) {
                    index++;
                }
                if (index < p[i].length()) {
                    b = p[i].charAt(index + 1);
                    System.out.println("Grammar without left recursion;");
                    System.out.println(nt + "->" + b + nt + "\'");
                    System.out.println("\n" + nt + "\'->" + a + nt + "\'|E");
                } else {
                    System.out.println("can't be reduced");
                }
            } else {
                System.out.println("is not left recursive");
            }
            index = 3;
        }
    }
}

EXP 4 :

import java.util.*;
public class LF
{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of productions:");
        int n = sc.nextInt();
        sc.nextLine();

        String[] productions = new String[n];
        System.out.println("Enter the productions:");
        for (int i = 0; i < n; i++) {
            productions[i] = sc.nextLine();
        }

        eliminateLeftFactoring(productions);
    }

    private static void eliminateLeftFactoring(String[] productions) {
        for (String production : productions) {
            String[] parts = production.split("->");
            String lhs = parts[0].trim();
            String[] rhs = parts[1].split("\\|");
            String prefix = findCommonPrefix(rhs);

            if (!prefix.isEmpty()) {
                System.out.println(lhs + "->" + prefix + lhs + "'");
                List<String> newRhs = new ArrayList<>();
                for (String r : rhs) {
                    if (r.startsWith(prefix)) {
                        String suffix = r.substring(prefix.length()).trim();
                        if (suffix.isEmpty()) {
                            suffix = "e";
                        }
                        newRhs.add(suffix);
                    } else {
                        newRhs.add(r);
                    }
                }
                System.out.println(lhs + "'->" + String.join("|", newRhs));
            } else {
                System.out.println(production);
            }
        }
    }

    private static String findCommonPrefix(String[] rhs) {
        String prefix = rhs[0];
        for (int i = 1; i < rhs.length; i++) {
            while (rhs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) {
                    return "";
                }
            }
        }
        return prefix;
    }
}

EXP 7 :

import java.util.Scanner;
class ProductionRule
{
      String left,right;
      ProductionRule(String left,String right)
      {
        this.left = left;
        this.right = right;
       }
 }
 public class SRP
 {
  public static void main(String[] args)
   {
        Scanner sc = new Scanner(System.in);
        String input, stack = "";
        int ruleCount;
        System.out.println("Enter the number of production rules: ");
        ruleCount = sc.nextInt();
        sc.nextLine();
        ProductionRule[] rules = new ProductionRule[ruleCount];
        System.out.println("Enter the production rules (in the form 'left->right'): ");
        for (int i = 0; i < ruleCount; i++) 
        {
            String[] temp = sc.nextLine().split("->");
            rules[i] = new ProductionRule(temp[0], temp[1]);
        }
        System.out.println("Enter the input string: ");
        input = sc.nextLine();
        int i = 0;
        while (true) {
            if (i < input.length()) {
                char ch = input.charAt(i);
                i++;
                stack += ch;
                System.out.print(stack + "\t");
                System.out.print(input.substring(i) + "\tShift " + ch + "\n");
            }
            for (int j = 0; j < ruleCount; j++) {
                int substringIndex = stack.indexOf(rules[j].right);
                if (substringIndex != -1) {
                    stack = stack.substring(0, substringIndex) + rules[j].left;
                    System.out.print(stack + "\t");
                    System.out.print(input.substring(i) + "\tReduce " + rules[j].left + "->" + rules[j].right + "\n");
                    j = -1; 
                }
            }
            if (stack.equals(rules[0].left) && i == input.length()) {
                System.out.println("\nAccepted");
                break;
            }
            if (i == input.length()) {
                System.out.println("\nNot Accepted");
                break;
            }
        }            

        sc.close();
    }
 }

EXP 8 :

import java.util.Scanner;

public class Exp8 {
    public static void main(String[] args) {
        char[] stack = new char[20];
        char[] ip = new char[20];
        char[][][] opt = new char[10][10][1];
        char[] ter = new char[10];
        int i, j, k, n, top = 0, col = 0, row = 0;

        Scanner scanner = new Scanner(System.in);

        for (i = 0; i < 10; i++) {
            stack[i] = 0;
            ip[i] = 0;
            for (j = 0; j < 10; j++) {
                opt[i][j][0] = 0;
            }
        }

        System.out.print("Enter the no. of terminals:");
        n = scanner.nextInt();
        System.out.print("\nEnter the terminals:");
        ter = scanner.next().toCharArray();

        System.out.println("\nEnter the table values:");
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                System.out.printf("\nEnter the value for %c %c:", ter[i], ter[j]);
                opt[i][j] = scanner.next().toCharArray();
            }
        }

        System.out.println("\nOPERATOR PRECEDENCE TABLE:");
        for (i = 0; i < n; i++) {
            System.out.print("\t" + ter[i]);
        }
        System.out.println();

        for (i = 0; i < n; i++) {
            System.out.println();
            System.out.print(ter[i]);
            for (j = 0; j < n; j++) {
                System.out.print("\t" + opt[i][j][0]);
            }
        }

        stack[top] = '$';
        System.out.print("\nEnter the input string:");
        String input = scanner.next();
        ip = input.toCharArray();
        i = 0;
        System.out.println("\nSTACK\t\t\tINPUT STRING\t\t\tACTION");
        System.out.print("\n" + String.valueOf(stack) + "\t\t\t" + input + "\t\t\t");

        while (i <= input.length()) {
            for (k = 0; k < n; k++) {
                if (stack[top] == ter[k])
                    col = k;
                if (ip[i] == ter[k])
                    row = k;
            }

            if ((stack[top] == '$') && (ip[i] == '$')) {
                System.out.println("String is ACCEPT");
                break;
            } else if ((opt[col][row][0] == '<') || (opt[col][row][0] == '=')) {
                stack[++top] = opt[col][row][0];
                stack[++top] = ip[i];
                System.out.println("Shift " + ip[i]);
                i++;
            } else {
                if (opt[col][row][0] == '>') {
                    while (stack[top] != '<') {
                        --top;
                    }
                    top = top - 1;
                    System.out.println("Reduce");
                } else {
                    System.out.println("\nString is ERROR");
                    break;
                }
            }
            System.out.println();
            for (k = 0; k <= top; k++) {
                System.out.print(stack[k]);
            }
            System.out.print("\t\t\t");
            for (k = i; k < input.length(); k++) {
                System.out.print(ip[k]);
            }
            System.out.print("\t\t\t");
        }
    }
}

EXP 9:

import java.util.Scanner;

public class StackOperations {
    static int[] stack;
    static int top, n;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        top = -1;

        System.out.println("Enter the size of stack[MAX=100]: ");
        n = scanner.nextInt();

        if (n <= 0) {
            System.out.println("Invalid stack size.");
            return;
        }

        stack = new int[n];

        System.out.println("\n\tStack Operations:");
        System.out.println("\t--------------------------");
        System.out.println("\t1. Push");
        System.out.println("\t2. Pop");
        System.out.println("\t3. Display");
        System.out.println("\t4. EXIT");

        int choice;
        do {
            System.out.println("\nEnter your choice: ");
            choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    push(scanner);
                    break;
                case 2:
                    pop();
                    break;
                case 3:
                    display();
                    break;
                case 4:
                    System.out.println("\nEXIT");
                    break;
                default:
                    System.out.println("Please enter a valid choice.");
            }
        } while (choice != 4);

    }

    static void push(Scanner scanner) {
        if (top >= n - 1) {
            System.out.println("\nStack overflow");
        } else {
            System.out.println("Enter a value to be pushed: ");
            int x = scanner.nextInt();
            top++;
            stack[top] = x;
        }
    }

    static void pop() {
        if (top == -1)
            System.out.println("\nStack underflow");
        else {
            System.out.println("\nThe popped element is " + stack[top]);
            top--;
        }
    }

    static void display() {
        if (top >= 0) {
            System.out.println("\nThe elements in the stack are:");
            for (int i = top; i >= 0; i--)
                System.out.println(stack[i]);
            System.out.println("\nSelect next choice");
        } else
            System.out.println("\nThe stack is empty.");
    }
}

EXP 10 :

import java.util.*;

class Instruction
{
    String op;    
    String arg1;  
    String arg2;  
    String result;

    Instruction(String op, String arg1, String arg2, String result) 
    {
        this.op = op;
        this.arg1 = arg1;
        this.arg2 = arg2;
        this.result = result;
    }

    @Override
    public String toString() 
    {
        return result + " = " + arg1 + " " + op + " " + arg2;
    }
}

class IntermediateCodeGenerator 
{
    private List<Instruction> instructions;
    private Stack<String> operands;
    private int tempCount;

    IntermediateCodeGenerator()
    {
        instructions = new ArrayList<>();
        operands = new Stack<>();
        tempCount = 0;
    }

    public List<Instruction> generate(String expression) 
    {
        Stack<Character> operators = new Stack<>();
        StringBuilder operand = new StringBuilder();

        for (int i = 0; i < expression.length(); i++)
        {
            char token = expression.charAt(i);

            if (Character.isWhitespace(token))
            {
                continue;
            }

            if (Character.isLetterOrDigit(token)) 
            {
                operand.append(token);
                if (i == expression.length() - 1 || !Character.isLetterOrDigit(expression.charAt(i + 1))) 
                {
                    operands.push(operand.toString());
                    operand.setLength(0);
                }
            } 
            else if (token == '(') 
            {
                operators.push(token);
            } 
            else if (token == ')') 
            {
                while (!operators.isEmpty() && operators.peek() != '(')
                {
                    processOperator(operators.pop());
                }
                operators.pop();
            }
            else if (isOperator(token)) 
            {
                while (!operators.isEmpty() && precedence(token) <= precedence(operators.peek()))
                {
                    processOperator(operators.pop());
                }
                operators.push(token);
            }
        }

        while (!operators.isEmpty())
        {
            processOperator(operators.pop());
        }

        return instructions;
    }

    private void processOperator(char operator)
    {
        String operand2 = operands.pop();
        String operand1 = operands.pop();
        String result = newTemp();
        instructions.add(new Instruction(String.valueOf(operator), operand1, operand2, result));
        operands.push(result);
    }

    private String newTemp()
    {
        return "t" + tempCount++;
    }

    private boolean isOperator(char token)
    {
        return token == '+' || token == '-' || token == '*' || token == '/';
    }

    private int precedence(char operator) 
    {
        switch (operator) 
        {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            default:
                return -1;
        }
    }
}

public class IntermediateCodeGeneration
{
    public static void main(String[] args) 
     {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter an arithmetic expression:");
        String expression = scanner.nextLine();

        IntermediateCodeGenerator icg = new IntermediateCodeGenerator();
        List<Instruction> code = icg.generate(expression);

        System.out.println("Intermediate Code:");
        for (Instruction instr : code) {
            System.out.println(instr);
        }

    }
}

EXP 5

import java.util.*;

public class Exp5 {
    static String first[],follow[],grammar[][];
    static List<String> nonTerminals=new ArrayList<>();
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the no of productions");
        int n=sc.nextInt();
        grammar=new String[n][2];
        System.out.println("Enter the productions that are free from Left Recursion");
        sc.nextLine();
        for(int i=0;i<n;i++)
        {
            String s=sc.nextLine();
            String p[]=s.split("->");
            nonTerminals.add(p[0].trim());
            grammar[i][0]=p[0].trim();
            grammar[i][1]=p[1];
        }
        sc.close();
        first=new String[n];follow=new String[n];
        for(int i=0;i<n;i++)
            first[i]=calculateFirst(i);
        System.out.println("First :-");
        for(int i=0;i<n;i++)
            System.out.println(nonTerminals.get(i)+" : "+print(first[i]));
        for(int i=0;i<n;i++)
            follow[i]=calculateFollow(i);
        System.out.println("Follow :-");
        for(int i=0;i<n;i++)
            System.out.println(nonTerminals.get(i)+" : "+print(follow[i]));
    }
    static String print(String s)
    {
        StringBuilder sb=new StringBuilder();
        sb.append('{');
        if(s.length()>0)
        	sb.append(s.charAt(0));
        for(char c:s.toCharArray())
            if(sb.indexOf(c+"")==-1)
            	sb.append(","+c);
        sb.append('}');
        return sb.toString();
    }
    static String calculateFirst(int i)
    {
        String s[]=grammar[i][1].split("\\|"),temp="";
        for(String p:s)
        {
            if(!nonTerminals.contains(p.charAt(0)+""))
                temp+=p.charAt(0);
            else
            {
                String t=calculateFirst(nonTerminals.indexOf(p.charAt(0)+""));
                if(t.contains("e"))
                {
                	if(!nonTerminals.contains(p.charAt(1)+""))
                		temp+=p.charAt(1);
                	else
                		temp+=calculateFirst(nonTerminals.indexOf(p.charAt(1)+""));
                }
                temp+=t;
            }
        }
        return temp;
    }
    static String calculateFollow(int i)
    {
        Set<Character> temp=new HashSet<>();
        if(i==0)
            temp.add('$');
        for(int idx=0;idx<grammar.length;idx++)
        {
            if(grammar[idx][0]==nonTerminals.get(i))
                continue;
            String s[]=grammar[idx][1].split("\\|");
            for(String p:s)
            {
                String nt=nonTerminals.get(i);
                if(p.contains(nt))
                {    
                    if(p.indexOf(nt)==p.length()-1)
                    {
                    	String t=follow[nonTerminals.indexOf(grammar[idx][0])];
                    	if(t==null)
                    		t=calculateFollow(nonTerminals.indexOf(grammar[idx][0]));
                    	for(char c:t.toCharArray())
                        	temp.add(c);
                    }
                    else
                    {
                        int x=p.indexOf(nt);
                        if(!nonTerminals.contains(p.charAt(x+1)+""))
                            temp.add(p.charAt(x+1));
                        else
                        {
                            if(first[nonTerminals.indexOf(p.charAt(x+1)+"")].contains("e"))
                            {
                            	String t=first[nonTerminals.indexOf(p.charAt(x+1)+"")];
                            	for(char c:t.toCharArray())
                        		temp.add(c);
                               temp.remove('e');
                               t=follow[nonTerminals.indexOf(grammar[idx][0])];
                    		if(t==null)
                    			t=calculateFollow(nonTerminals.indexOf(grammar[idx][0]));
                    		for(char c:t.toCharArray())
                        		temp.add(c);
                            }
                            else
                            {
                            	String t=first[nonTerminals.indexOf(p.charAt(x+1)+"")];
                            	for(char c:t.toCharArray())
                                	temp.add(c);
                            }
                        }
                    }
                }
            }
        }
        String ans="";
        for(char x:temp)
            ans+=x;
        return ans;
    }
}

EXP 6

import java.util.*;
public class PredictiveParser {
  static String first[],follow[],grammar[][];
     static List<String> nonTerminals=new ArrayList<>();
     static Map<String,Map<Character,String>> table=new HashMap<>();
     public static void main(String[] args) {
         Scanner sc=new Scanner(System.in);
         System.out.println("Enter the no of productions");
         int n=sc.nextInt();
         grammar=new String[n][2];
         System.out.println("Enter the productions that are free from Left Recursion(Use '@' Symbol for Epsilon)");
         sc.nextLine();
         for(int i=0;i<n;i++)
         {
             String s=sc.nextLine();
             String p[]=s.split("->");
             nonTerminals.add(p[0].trim());
             grammar[i][0]=p[0].trim();
             grammar[i][1]=p[1];
         }
         for(String s:nonTerminals)
          table.put(s, new HashMap<>());
         first=new String[n];follow=new String[n];
         for(int i=0;i<n;i++)
             first[i]=calculateFirst(i);
         for(int i=0;i<n;i++)
             follow[i]=calculateFollow(i);
         for(int i=0;i<n;i++)
          if(first[i].contains("@"))
           for(char c:follow[i].toCharArray())
            table.get(grammar[i][0]).put(c,"@");
         System.out.println("Enter the String to Check whether it is accepted or not");
         String s=sc.nextLine();
         if(check(s+"$"))
          System.out.println("String is accepted");
         else
          System.out.println("String is rejected");
     }
     static String calculateFirst(int i)
     {
         String s[]=grammar[i][1].split("\\|"),temp="";
         for(String p:s)
         {
             if(!nonTerminals.contains(p.charAt(0)+""))
                 temp+=p.charAt(0);
             else
             {
                 String t=calculateFirst(nonTerminals.indexOf(p.charAt(0)+""));
                 if(t.contains("@"))
                 {
                  if(!nonTerminals.contains(p.charAt(1)+""))
                   temp+=p.charAt(1);
                  else
                   temp+=calculateFirst(nonTerminals.indexOf(p.charAt(1)+""));
                 }
                 temp+=t;
             }
             table.get(grammar[i][0]).put(temp.charAt(temp.length()-1),p);
         }
         return temp;
     }
     static String calculateFollow(int i)
     {
         Set<Character> temp=new HashSet<>();
         if(i==0)
             temp.add('$');
         for(int idx=0;idx<grammar.length;idx++)
         {
             if(grammar[idx][0]==nonTerminals.get(i))
                 continue;
             String s[]=grammar[idx][1].split("\\|");
             for(String p:s)
             {
                 String nt=nonTerminals.get(i);
                 if(p.contains(nt))
                 {    
                     if(p.indexOf(nt)==p.length()-1)
                     {
                      String t=follow[nonTerminals.indexOf(grammar[idx][0])];
                      if(t==null)
                       t=calculateFollow(nonTerminals.indexOf(grammar[idx][0]));
                      for(char c:t.toCharArray())
                          temp.add(c);
                     }
                     else
                     {
                         int x=p.indexOf(nt);
                         if(!nonTerminals.contains(p.charAt(x+1)+""))
                             temp.add(p.charAt(x+1));
                         else
                         {
                             if(first[nonTerminals.indexOf(p.charAt(x+1)+"")].contains("@"))
                             {
                              String t=first[nonTerminals.indexOf(p.charAt(x+1)+"")];
                              for(char c:t.toCharArray())
                           temp.add(c);
                                temp.remove('@');
                                t=follow[nonTerminals.indexOf(grammar[idx][0])];
                       if(t==null)
                        t=calculateFollow(nonTerminals.indexOf(grammar[idx][0]));
                       for(char c:t.toCharArray())
                           temp.add(c);
                             }
                             else
                             {
                              String t=first[nonTerminals.indexOf(p.charAt(x+1)+"")];
                              for(char c:t.toCharArray())
                                  temp.add(c);
                             }
                         }
                     }
                 }
             }
         }
         String ans="";
         for(char x:temp)
             ans+=x;
         return ans;
     }
     static boolean check(String s)
     {
      Stack<Character> stk=new Stack<>();
      stk.add('$');
      stk.add(nonTerminals.get(0).charAt(0));
      int i=0;
      while(i<s.length())
      {
       if(stk.isEmpty())
        return false;
       if(stk.peek()==s.charAt(i))
       {
        stk.pop();
        i++;
        continue;
       }
       char c=stk.pop();
       String t=table.get(c+"").get(s.charAt(i));
       if(t=="@")
        continue;            
       for(int idx=t.length()-1;idx>=0;idx--)
        stk.push(t.charAt(idx));
      }
      if(stk.isEmpty())
       return true;
      return false;
     }
}
